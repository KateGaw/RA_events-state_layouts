{"version":3,"sources":["components/IconSwitch.js","components/CardsView.js","components/ListView.js","components/data.js","components/Store.js","App.js","serviceWorker.js","index.js"],"names":["IconSwitch","props","className","onClick","onSwitch","icon","CardsView","cards","map","card","i","key","name","color","src","img","alt","price","ListView","index","products","Store","useState","setIcon","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kRAiBeA,EAbI,SAACC,GAAD,OACjB,yBAAKC,UAAU,QACb,4BAAQC,QAASF,EAAMG,SAAUF,UAAU,cACzC,uBAAGA,UAAU,kBAAkBD,EAAMI,SCyB5BC,EA7BG,SAACL,GACjB,OACE,yBAAKC,UAAU,SACZD,EAAMM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,EAAGR,UAAU,QACrB,uBAAGA,UAAU,QAAQO,EAAKG,MAC1B,0BAAMV,UAAU,SAASO,EAAKI,OAC9B,yBAAKC,IAAKL,EAAKM,IAAKC,IAAKP,EAAKM,IAAKb,UAAU,YAC7C,yBAAKA,UAAU,YACb,0BAAMA,UAAU,SAAhB,WAA6BO,EAAKQ,QAClC,4BAAQf,UAAU,aAAlB,sBCiBGgB,EA3BE,SAACjB,GAChB,OACE,wBAAIC,UAAU,QACXD,EAAMM,MAAMC,KAAI,SAACC,EAAMU,GAAP,OACf,wBAAIR,IAAKQ,GACP,yBAAKL,IAAKL,EAAKM,IAAKb,UAAU,MAAMc,IAAKG,IACzC,uBAAGjB,UAAU,QAAQO,EAAKG,MAC1B,0BAAMV,UAAU,SAASO,EAAKI,OAC9B,0BAAMX,UAAU,SAAhB,WAA6BO,EAAKQ,QAClC,4BAAQf,UAAU,aAAlB,sBCZGkB,EAAW,CAAC,CACrBR,KAAM,gBACNK,MAAO,MACPJ,MAAO,MACPE,IAAK,wGACN,CACCH,KAAM,gBACNK,MAAO,MACPJ,MAAO,QACPE,IAAK,wGACN,CACCH,KAAM,gBACNK,MAAO,MACPJ,MAAO,OACPE,IAAK,wGACN,CACCH,KAAM,gBACNK,MAAO,MACPJ,MAAO,QACPE,IAAK,wGACN,CACCH,KAAM,gBACNK,MAAO,MACPJ,MAAO,QACPE,IAAK,wGACN,CACCH,KAAM,gBACNK,MAAO,MACPJ,MAAO,QACPE,IAAK,yGCAMM,EAvBD,WAAO,IAAD,EACMC,mBAAS,aADf,mBACXjB,EADW,KACLkB,EADK,KAalB,OAFAC,QAAQC,IAAIpB,GAGV,oCACE,kBAAC,EAAD,CAAYA,KAAMA,EAAMD,SAZX,WAEbmB,EADW,gBAATlB,EACM,YAEA,kBAUE,cAATA,GAAwB,kBAAC,EAAD,CAAUE,MAAOa,IAChC,gBAATf,GAA0B,kBAAC,EAAD,CAAWE,MAAOa,MCLpCM,MAdf,WACE,OACE,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBAEjB,yBAAKA,UAAU,UACb,kBAAC,EAAD,SCDYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.c733d7e7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst IconSwitch = (props) => (\n  <div className='icon'>\n    <button onClick={props.onSwitch} className='iconButton'>\n      <i className='material-icons'>{props.icon}</i>\n    </button>\n  </div>\n);\n\nIconSwitch.propTypes = {\n  icon: PropTypes.string.isRequired,\n  onSwitch: PropTypes.func.isRequired,\n}\n\nexport default IconSwitch;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CardsView = (props) => {\n  return (\n    <div className=\"cards\">\n      {props.cards.map((card, i) => (\n        <div key={i} className=\"card\">\n          <p className=\"name\">{card.name}</p>\n          <span className=\"color\">{card.color}</span>\n          <img src={card.img} alt={card.img} className='cardImg'></img>\n          <div className=\"cardDesc\">\n            <span className=\"price\">{`$${card.price}`}</span>\n            <button className=\"addButton\">add to cart</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nCardsView.propTypes = {\n  cards: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      img: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default CardsView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ListView = (props) => {\n  return (\n    <ul className=\"list\">\n      {props.cards.map((card, index) => (\n        <li key={index}>\n          <img src={card.img} className=\"img\" alt={index}></img>\n          <p className=\"name\">{card.name}</p>\n          <span className=\"color\">{card.color}</span>\n          <span className=\"price\">{`$${card.price}`}</span>\n          <button className=\"addButton\">ADD TO CHART</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nListView.propTypes = {\n  cards: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      img: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ListView;\n","export const products = [{\n    name: \"Nike Metcon 2\",\n    price: \"130\",\n    color: \"red\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/1.jpg\"\n}, {\n    name: \"Nike Metcon 2\",\n    price: \"130\",\n    color: \"green\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/2.jpg\"\n}, {\n    name: \"Nike Metcon 2\",\n    price: \"130\",\n    color: \"blue\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/3.jpg\"\n}, {\n    name: \"Nike Metcon 2\",\n    price: \"130\",\n    color: \"black\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/4.jpg\"\n}, {\n    name: \"Nike free run\",\n    price: \"170\",\n    color: \"black\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/7.jpg\"\n}, {\n    name: \"Nike Metcon 3\",\n    price: \"150\",\n    color: \"green\",\n    img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/layouts/img/5.jpg\"\n}];","import React, { useState } from \"react\";\nimport IconSwitch from \"./IconSwitch\";\nimport CardsView from \"./CardsView\";\nimport ListView from \"./ListView\";\nimport { products } from \"./data\";\n\nconst Store = () => {\n  const [icon, setIcon] = useState(\"view_list\");\n\n  const onSwitch = () => {\n    if (icon === \"view_module\") {\n      setIcon(\"view_list\");\n    } else {\n      setIcon(\"view_module\");\n    }\n  };\n\n  console.log(icon);\n\n  return (\n    <>\n      <IconSwitch icon={icon} onSwitch={onSwitch} />\n\n      {icon === \"view_list\" && <ListView cards={products} />}\n      {icon === \"view_module\" && <CardsView cards={products} />}\n    </>\n  );\n};\n\nexport default Store;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Store from './components/Store';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"></div>\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"></div>\n      </div>\n      <div className=\"window\">\n        <Store />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}